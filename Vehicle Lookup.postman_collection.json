{
	"info": {
		"_postman_id": "2dedae13-cc5f-4f33-89b7-162f001012b1",
		"name": "Vehicle Lookup",
		"description": "An API which allows for the saving of a vehicle model and its manufacturer",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30817406"
	},
	"item": [
		{
			"name": "Vehicle",
			"item": [
				{
					"name": "Create Vehicle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Test\", () => {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Model should be Civic\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"model\", \"Civic\");",
									"});",
									"",
									"pm.test(\"Manufacturer's ID should match the last saved id\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"manufacturer\", pm.environment.get(\"lastManufacturer\"))",
									"});",
									"",
									"pm.test(\"Vehicle's _id field is not null and should be stored for later testing\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"_id\");",
									"    pm.environment.set(\"lastVehicle\", response._id);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"Civic\",\n    \"manufacturer\": \"{{lastManufacturer}}\",\n    \"vehicleType\": [\"Sedan\", \"Hatchback\"],\n    \"releaseDate\": \"1972-7-1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{vehicle_url}}",
							"host": [
								"{{vehicle_url}}"
							]
						}
					},
					"response": [
						{
							"name": "Create Vehicle",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"model\": \"Accord\",\n    \"manufacturer\": \"6551abfae90152a199d42d6f\",\n    \"vehicleType\": [\"Sedan\", \"Hatchback\"],\n    \"releaseDate\": \"1972-7-1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{vehicl_url}}",
									"host": [
										"{{vehicl_url}}"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get All Vehicles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response statush should be 200\", () => pm.response.to.have.status(200));",
									"",
									"pm.test(\"One model should be available\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"length\", 1);",
									"});",
									"",
									"pm.test(\"first vehicle should have model name of Civic\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0]).to.have.property(\"model\", \"Civic\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{vehicle_url}}",
							"host": [
								"{{vehicle_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Vehicle by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response Status should be 200\", ()=>pm.response.to.have.status(200));",
									"",
									"pm.test(\"Model should be 300c\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"model\", \"300c\");",
									"});",
									"",
									"pm.test(\"Manufacturer should match lastManufacturer\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.manufacturer).to.have.property(\"_id\", pm.environment.get(\"lastManufacturer\"))",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{vehicle_url}}/id/:id",
							"host": [
								"{{vehicle_url}}"
							],
							"path": [
								"id",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{lastVehicle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Vehicle by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 202\", ()=>pm.response.to.have.status(202));",
									"",
									"pm.test(\"Model should now be 300c\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"model\", \"300c\");",
									"});",
									"",
									"pm.test(\"VehicleType should contain 1 type and it should be Sedan\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response.vehicleType).to.have.length(1);",
									"    pm.expect(response.vehicleType).to.contain(\"Sedan\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"model\": \"300c\",\n    \"vehicleType\": [\"Sedan\"],\n    \"releaseDate\": \"2003-7-15\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{vehicle_url}}/id/:id",
							"host": [
								"{{vehicle_url}}"
							],
							"path": [
								"id",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{lastVehicle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Vehicle by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 204\", ()=>pm.response.to.have.status(204));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{vehicle_url}}/id/:id",
							"host": [
								"{{vehicle_url}}"
							],
							"path": [
								"id",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{lastVehicle}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Manufacturer",
			"item": [
				{
					"name": "Create Manufacturer (Honda)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Test\", ()=> pm.response.to.have.status(202));",
									"",
									"pm.test(\"Manufacturer should be 'Honda'\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"name\", \"Honda\");",
									"});",
									"",
									"pm.test(\"Manufacturer should have established date of 24/09/1948\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"established\", \"1948-09-24T04:00:00.000Z\");",
									"});",
									"",
									"//This is not a meaningful test but I am using it to store an id for later testing",
									"pm.test(\"Has a valid ID and store for later\", ()=> { ",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"_id\");",
									"    pm.environment.set(\"lastManufacturer\", response._id)",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Honda\",\n    \"established\":\"1948-9-24\",\n    \"revenue\": 98547410000.00\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{manufacturer_url}}",
							"host": [
								"{{manufacturer_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all manufacturers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status should be 200\", () => pm.response.to.have.status(200));",
									"",
									"pm.test(\"Total number of manufacturers should be 1\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"length\", 1);",
									"});",
									"",
									"pm.test(\"First result's ID should equal last ID\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response[0]).to.have.property(\"_id\", pm.environment.get(\"lastManufacturer\"));",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{manufacturer_url}}",
							"host": [
								"{{manufacturer_url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get manufacturer by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 200\", ()=>pm.response.to.have.status(200));",
									"",
									"pm.test(\"Manufacturer name should be Chrysler\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"name\", \"Chrysler\");",
									"});",
									"",
									"pm.test(\"Manufacturer ID should equal the last manufacturer id stored\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"_id\", pm.environment.get(\"lastManufacturer\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{manufacturer_url}}/id/:id",
							"host": [
								"{{manufacturer_url}}"
							],
							"path": [
								"id",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{lastManufacturer}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update manufacturer by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 202\", ()=> pm.response.to.have.status(202))",
									"",
									"pm.test(\"Manufacturer name should now be Chrysler\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"name\", \"Chrysler\");",
									"});",
									"",
									"pm.test(\"Manufacturer should be established 6/6/1925\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"established\", \"1925-06-06T04:00:00.000Z\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Chrysler\",\n    \"established\": \"1925-6-6\",\n    \"revenue\": 6000000000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{manufacturer_url}}/id/:id",
							"host": [
								"{{manufacturer_url}}"
							],
							"path": [
								"id",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{lastManufacturer}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete manufacturer by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status should be 202\",()=>pm.response.to.have.status(202));",
									"",
									"pm.test(\"Response should have property 'acknowledged' which equals true\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"acknowledged\", true);",
									"});",
									"",
									"pm.test(\"Response should have property 'deletedCount' which equals 1\", ()=>{",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property(\"deletedCount\", 1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{manufacturer_url}}/id/:id",
							"host": [
								"{{manufacturer_url}}"
							],
							"path": [
								"id",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{lastManufacturer}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*",
							"I am getting warnings about using more then the free run limit. Also the final tests are not running. In attempts to correct this I am blocking these checks here as this this not a functional endpoint",
							"pm.test(\"Status should be 200\", ()=> pm.response.to.have.status(200));",
							"",
							"pm.test(\"Response should say 'Service is up'\", ()=>{",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property(\"message\", \"Service is up\");",
							"});",
							"",
							"pm.test(\"Response should have a property indicating status check is successful\", () => {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property(\"success\", true);",
							"});*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{status_url}}",
					"host": [
						"{{status_url}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost",
			"type": "string"
		},
		{
			"key": "port",
			"value": "3000",
			"type": "string"
		},
		{
			"key": "api_url",
			"value": "{{status_url}}/v1",
			"type": "string"
		},
		{
			"key": "vehicle_url",
			"value": "{{api_url}}/vehicle",
			"type": "string"
		},
		{
			"key": "manufacturer_url",
			"value": "{{api_url}}/manufacturer",
			"type": "string"
		},
		{
			"key": "status_url",
			"value": "{{base_url}}:{{port}}",
			"type": "string"
		}
	]
}